{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAKMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,uBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,mBACNC,SAAU,eAyBHE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARrC,GAAKH,EAAM,EACVD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAEJP,EAAaS,GAA/BP,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAEb,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC9BlBU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAS,oBACV,yBAAKA,UAAS,sBACTN,EAAMQ,WAMvBD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCVTG,E,4MACFC,MAAQ,CAACV,IAAI,KAAMW,aAAc,I,kEAEZ,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAACjB,IAAKgB,EAASE,OAAOC,cAAY,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAACN,aAAcS,EAAIb,e,sCAKxG,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAChC,uCAAaqB,KAAKX,MAAMC,eAG9BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAChC,kBAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGnC,kBAAC,EAAD,CAASO,QAAS,qC,+BAKzB,OACI,6BACKc,KAAKC,qB,GAzBJC,IAAMC,WA+BxBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.7a67164b.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: 'Let\\'s hit the beach!',\r\n        iconName: 'sun'\r\n    },\r\n    winter: {\r\n        text: 'Burr it is cold!',\r\n        iconName: 'snowflake'\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n    if (month>2 && month<9){\r\n        return lat > 0 ? 'summer' : 'winter';\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n}\r\n\r\nconst SeasonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const {text, iconName} = seasonConfig[season];\r\n\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <i className={`icon-left massive ${iconName} icon`}/>\r\n            <h1>{text}</h1>\r\n            <i className={`icon-right massive ${iconName} icon`}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeasonDisplay;","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className={`ui active dimmer`}>\r\n            <div className={`ui big text loader`}>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSpinner.defaultProps = {\r\n  message: 'Loading...'\r\n};\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass App extends React.Component {\r\n    state = {lat:null, errorMessage: ''};\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => this.setState({lat: position.coords.latitude}), err => this.setState({errorMessage: err.message})\r\n        );\r\n    }\r\n\r\n    renderContent() {\r\n        if (this.state.errorMessage && !this.state.lat){\r\n            return <div>Error: {this.state.errorMessage}</div>\r\n        }\r\n\r\n        if (!this.state.errorMessage && this.state.lat){\r\n            return <SeasonDisplay lat={this.state.lat}/>\r\n        }\r\n\r\n        return <Spinner message={\"Please accept location request\"}/>\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderContent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector('#root')\r\n)\r\n"],"sourceRoot":""}